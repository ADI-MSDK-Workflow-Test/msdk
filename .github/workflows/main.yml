name: Verify Register and SVD Files

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  MSDK_DIR: msdk
  MSDK-INTERNAL_DIR: msdk-internal
  
  # Check effected parts.
  # GLOSSARY:
  # Chip name will mean the designation number of microcontroller like MAX32670 and MAX78000
  # Die name will refer to the die type name of micrcontroller like ME15 and AI85
  # Part will mean the microcontroller product itself, could refer to chip name or die name
  AFFECTED_PARTS: none
  
  # Don't run the workflow if none of the register files changed.
  DIFF_FILES_FLAG: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The verify job will check the differences with any updated register file.
  verify:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - name: Clean
        continue-on-error: true
        run: |
          # Remove local modifications
          set +e
          # Attempt to clean the repo
          git scorch
          retval=$?
          # Remove everything if this fails
          if [[ $retval -ne 0 ]]
          then
            rm -rf *
          fi
          set -e
          
      # Checks-out MSDK and MSDK-INTERNAL repositories under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout msdk repository
        uses: actions/checkout@v3
        with:
          # Update the submodules below, doing so here will convert ssh to https
          submodules: false
          fetch-depth: 0
          path: ${{ env.MSDK_DIR }}
      
      - name: Checkout msdk internal repository
        uses: actions/checkout@v3
        with:
          repository: ADI-MSDK-Workflow-Test/msdk-internal
          fetch-depth: 0
          token: ${{ secrets.PAT }}
          #ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          #ssh-key: ''
          path: ${{ env.MSDK-INTERNAL_DIR }}
          
      # Use these next steps to verify if register files were updated.
      # Easier to read in Actions' console window if separated by steps.
      - name: Checking if register files were updated.
        run: |
          cd ${{ env.MSDK_DIR }}
          CHANGED_FILES=$(git diff --ignore-submodules --name-only remotes/origin/master '*_regs.h')
          
          if [[ -n ${CHANGED_FILES} ]]; then
            echo "DIFF_FILES_FLAG=true" >> $GITHUB_ENV
          else
            echo "No register file changed."
          fi
          
      # This step is just to indicate status of job in Actions' console if there are no
      # register file changes.
      - name: No register files updated. Completed.
        if: env.DIFF_FILES_FLAG == 'false'
        run: |
          echo "None of the committed files were updated register files. No need to check differences."
          exit 0
          
      # SVD Scripts require software that's not preinstalled with GitHub workflow servers.
      # Only install packages if there are register files to verify. Saves time if there are no
      # register changes.
      - name: Detected Register File Change. Install required packages for scripts.
        if: env.DIFF_FILES_FLAG == 'true'
        run: |
          # Install XMLFormatter for scripts.
          sudo apt-get install -y xmlformat-perl
            
      # Generate the register file for all affected parts.
      # Only generate register files if there are committed register files to verify And if the software packages properly installed. \
      # Saves time if there are no register file changes. 
      - name: Generating Register Files from Peripheral SVD Files then Comparing to Updated Register Files.
        if: success() && env.DIFF_FILES_FLAG == 'true'
        run: |
          # Create associative array for dictionary
          declare -A CHIP_DIE_NAMES
          
          # Keep track of changed register files for each part
          declare -A CHANGED_PART_FILES
          
          # Keep track of all the changed registers and the path to generated register files
          declare -A DIFF_FILES_LIST
          
          # Add future parts to this dictionary
          CHIP_DIE_NAMES[MAX78000]=AI85
          CHIP_DIE_NAMES[MAX78002]=AI87
          CHIP_DIE_NAMES[MAX32520]=ES17
          CHIP_DIE_NAMES[MAX32650]=ME10
          CHIP_DIE_NAMES[MAX32660]=ME11
          CHIP_DIE_NAMES[MAX32662]=ME12
          CHIP_DIE_NAMES[MAX32570]=ME13
          CHIP_DIE_NAMES[MAX32665]=ME14
          CHIP_DIE_NAMES[MAX32670]=ME15
          CHIP_DIE_NAMES[MAX32675]=ME16
          CHIP_DIE_NAMES[MAX32655]=ME17
          CHIP_DIE_NAMES[MAX32690]=ME18
          CHIP_DIE_NAMES[MAX32680]=ME20
          CHIP_DIE_NAMES[MAX32672]=ME21
          
          # Find diff in MSDK repo
          cd ${{ env.MSDK_DIR }}
          CHANGED_FILES=$(git diff --ignore-submodules --name-only remotes/origin/master '*_regs.h')

          # This set keeps tracks of all the parts with updated register files. (No duplicates).
          # The MSDK will be using the Chips names in the path to register files.
          AFFECTED_CHIP_SET=()
          
          # Formatted list that will be assigned to environment variable for next step:
          #   "Run SVD scripts to generate register files"
          AFFECTED_DIE_LIST=""
          
          #---------------------------
          # Grab the part relating to the changed register file and add to list for env variable assignment.
          # Note: This only works for register files in this path:
          #   msdk/Libraries/CMSIS/Device/Maxim/[CHIP_NAME]/Include/*_regs.h
          echo -e "\n\e[0;33m==================================================================\n"
          echo -e "\e[0;33mScanning for any changes in register files"
          echo -e "\n\e[0;33m==================================================================\n"
          
          for changed_reg_file in $CHANGED_FILES
          do        
            # Removing (prefix) path to [CHIP_NAME]/Include/*_regs.h
            CHIP_NAME=${changed_reg_file#*/Maxim/}
            # Remove (suffix) following path /Include/*_regs.h to get the [CHIP_NAME]
            CHIP_NAME=${CHIP_NAME%%/*}
            
            # Each element (part) of associative array is a list of changed files
            # Add space delimiter if not empty
            if [[ ${#CHANGED_PART_FILES[@]} ]]; then
              CHANGED_PART_FILES[${CHIP_DIE_NAMES[$CHIP_NAME]}]+=" "
            fi
            CHANGED_PART_FILES[${CHIP_DIE_NAMES[$CHIP_NAME]}]+=$changed_reg_file
            
            echo "CHANGED_PART_FILES[${CHIP_DIE_NAMES[$CHIP_NAME]}]"
            
            # Keep track of effected parts, don't add duplicates.
            if [[ ! "${AFFECTED_CHIP_SET[*]}" =~ "$CHIP_NAME" ]]; then
              AFFECTED_CHIP_SET+=("$CHIP_NAME")
              
              # Create list with die name of effected parts for SVD scripts as you go
              # List will have " " (space) as the delimiter
              # Only add space when you're adding more than one item into list.
              if [[ ! -z "$AFFECTED_DIE_LIST" ]]; then
                AFFECTED_DIE_LIST+=" "
              fi
              AFFECTED_DIE_LIST+="${CHIP_DIE_NAMES[$CHIP_NAME]}"
              
            fi
            
            # Keep track of all diff files.
            DIFF_FILES_LIST[./${{ env.MSDK_DIR }}/$changed_reg_file]=./${{ env.MSDK-INTERNAL_DIR }}/SVD/Devices/${CHIP_DIE_NAMES[$CHIP_NAME]}/chip_test/${changed_reg_file##*/}
            echo -e "[\e[1;33mCHANGED\e[0m]: $changed_reg_file"
          done
        
          echo "Changed Diff Files: ${CHANGED_PART_FILES[*]}"
           
          # Exit out of msdk directory.
          cd ../${{ env.MSDK-INTERNAL_DIR }}/SVD/Devices/

          #---------------------------
          # Generate register files for all affected parts.
          echo -e "\n\e[0;33m==================================================================\n"
          echo -e "\e[0;33mGenerating register files for all affected parts"
          echo -e "\n\e[0;33m==================================================================\n"
          
          # Used to keep track updated register file and its complementary peripheral SVD File.
          declare -A PERIPH_SVD_FILE_LIST

          echo -e "Affected Parts: \e[1;33m$AFFECTED_DIE_LIST\n"
          
          # File with all the paths to each peripheral SVD files relating to the part.
          CHIP_PERIPH="chip_periph.txt"
          
          if [[ -n $AFFECTED_DIE_LIST ]]; then            
            for die_name in $AFFECTED_DIE_LIST
            do
              echo -e "[\e[1;33m$die_name\e[0m] Generating Register Files."
              cd $die_name
            
              chmod u+x makeRegs.sh
              ./makeRegs.sh ubuntu
              
              # Keep track of complementary peripheral SVD file
              # Read chip_periph.txt
              while read -r line; 
              do
                echo "Reading file: ${CHANGED_PART_FILES[$die_name]}"
               
                # Check whether one of the changed register files matches with SVD path
                for changed_reg_file in "${CHANGED_PART_FILES[$die_name]}"
                do
                  # Isolate peripheral (capitalized) of changed register file to find corresponding peripheral SVD file
                  periph=${changed_reg_file##*/}
                  periph=${periph%_regs.h}
                  periph=${periph^^}
                  echo "Getting peripheral: $periph"
                  if [[ $line == *"$periph"* ]]; then
                    echo "Match"
                  fi
                done
              done <$CHIP_PERIPH
              
              cd ../
            done            
          fi
          
          echo -e "\nFinished Generating Register Files."
          
          # Exit current directory and return to MSDK repo.
          cd ../../../
          
          #---------------------------
          echo -e "\n\e[0;33m==================================================================\n"
          echo -e "\e[0;33mComparing Each Updated Register File to Generated Register File."
          echo -e "\n\e[0;33m==================================================================\n"

          CHECK_FAIL=0
          set +e
          for updated_reg_file in "${!DIFF_FILES_LIST[@]}"
          do
            echo -e "Updated: \e[1;33m$updated_reg_file  \e[0m==>  Generated: \e[0;32m${DIFF_FILES_LIST[$updated_reg_file]}"
            diff -u $updated_reg_file ${DIFF_FILES_LIST[$updated_reg_file]}
            
            if [[ $? != 0 ]]; then
              echo -e "[\e[0;31mERROR\e[0m] $updated_reg_file does not match with corresponding SVD File:"
              echo -e ""
              echo -e "Please update corresponding SVD file."
              CHECK_FAIL=1
            fi
          done
          set -e
          
          exit $CHECK_FAIL

